-- #############################################
-- Q1 – DDL (Students → StudentData)
-- #############################################

CREATE TABLE Students (ID INT, Name VARCHAR(100), Age INT);
ALTER TABLE Students ADD Class VARCHAR(50);
ALTER TABLE Students RENAME TO StudentData;
ALTER TABLE StudentData DROP COLUMN Age;

-- #############################################
-- Q2 – DDL (Courses)
-- #############################################

CREATE TABLE Courses (CourseID INT, CourseName VARCHAR(100));
ALTER TABLE Courses ADD Duration VARCHAR(50);
ALTER TABLE Courses ADD PRIMARY KEY (CourseID);
DROP TABLE Courses;

-- #############################################
-- Q3 – DDL (Results)
-- #############################################

CREATE TABLE Results (StudentID INT, Subject VARCHAR(100), Marks INT);
ALTER TABLE Results ADD Grade CHAR(2);
ALTER TABLE Results MODIFY Marks INT NOT NULL;
ALTER TABLE Results DROP COLUMN Grade;

-- #############################################
-- Q4 – DDL (Teachers)
-- #############################################

CREATE TABLE Teachers (TeacherID INT, Name VARCHAR(100), Subject VARCHAR(100));
ALTER TABLE Teachers ADD Email VARCHAR(100);
ALTER TABLE Teachers ADD PRIMARY KEY (TeacherID);
DROP TABLE Teachers;

-- #############################################
-- Q5 – DDL (Library)
-- #############################################

CREATE TABLE Library (BookID INT, BookName VARCHAR(200), IssuedTo VARCHAR(100));
ALTER TABLE Library ADD IssuedDate DATE;
ALTER TABLE Library RENAME COLUMN IssuedTo TO StudentID;
ALTER TABLE Library DROP COLUMN IssuedDate;

-- #############################################
-- Q6 – DML (StudentData & Courses)
-- #############################################

INSERT INTO StudentData (ID, Name, Class) VALUES (1, 'Alice', '4th');
INSERT INTO Courses (CourseID, CourseName, Duration) VALUES (101, 'Maths', '3 months'), (102, 'History', '4 months');
UPDATE StudentData SET Class = '5th' WHERE ID = 1;
DELETE FROM StudentData WHERE ID = 2;

-- #############################################
-- Q7 – DML (Courses, StudentData, Results)
-- #############################################

INSERT INTO Courses (CourseID, CourseName) VALUES (103, 'Maths');
UPDATE Courses SET Duration = '6 months';
DELETE FROM StudentData WHERE Age > 12;
INSERT INTO Results (StudentID, Subject, Marks) VALUES (1, 'Science', 75);

-- #############################################
-- Q8 – DML (Teachers & Library)
-- #############################################

INSERT INTO Teachers (TeacherID, Name, Subject, Email) VALUES (1, 'Ravi', 'Math', 'ravi@example.com');
UPDATE Teachers SET Subject = 'Science' WHERE TeacherID = 1;
DELETE FROM Teachers WHERE Name = 'Ravi';
INSERT INTO Library (BookID, BookName, StudentID) VALUES (1, 'Physics 101', NULL), (2, 'Chemistry Basics', 1), (3, 'Biology Intro', NULL);

-- #############################################
-- Q9 – DML (Results & StudentData)
-- #############################################

INSERT INTO Results (StudentID, Subject, Marks) VALUES (1, 'Maths', 85);
UPDATE Results SET Marks = 90 WHERE StudentID = 1;
DELETE FROM Results WHERE Marks < 40;
INSERT INTO StudentData (ID, Name, Class) VALUES (2, 'Bob', '5th');

-- #############################################
-- Q10 – DML (Library & Courses)
-- #############################################

INSERT INTO Library (BookID, BookName, StudentID) VALUES (4, 'World History', NULL);
UPDATE Library SET BookName = 'English Grammar' WHERE BookID = 2;
DELETE FROM Library WHERE StudentID IS NULL;
INSERT INTO Courses (CourseID, CourseName) VALUES (101, 'History');

-- #############################################
-- Q11 – Views
-- #############################################

CREATE VIEW StudentInfo AS SELECT Name, Class, Marks FROM StudentData s JOIN Results r ON s.ID = r.StudentID;
CREATE VIEW PassedStudents AS SELECT * FROM StudentInfo WHERE Marks >= 50;
DROP VIEW StudentInfo;
UPDATE PassedStudents SET Marks = Marks + 1 WHERE Name = 'Alice';

-- #############################################
-- Q12 – Views
-- #############################################

CREATE VIEW CourseDetails AS SELECT c.CourseName, t.Name AS TeacherName FROM Courses c JOIN Teachers t ON c.CourseID = t.TeacherID;
CREATE VIEW TopPerformers AS SELECT s.Name, r.Marks FROM StudentData s JOIN Results r ON s.ID = r.StudentID WHERE r.Marks > 80;
SELECT * FROM TopPerformers;
DROP VIEW TopPerformers;

-- #############################################
-- Q13 – Views
-- #############################################

CREATE VIEW TotalMarks AS SELECT StudentID, SUM(Marks) AS Total FROM Results GROUP BY StudentID;
CREATE VIEW StudentCourses AS SELECT s.Name, c.CourseName FROM StudentData s JOIN Courses c ON s.ID = c.CourseID;
ALTER VIEW CourseDetails AS SELECT c.CourseName, t.Name AS TeacherName, c.Duration FROM Courses c JOIN Teachers t ON c.CourseID = t.TeacherID;
DROP VIEW CourseDetails;

-- #############################################
-- Q14 – Clauses
-- #############################################

SELECT * FROM StudentData WHERE Department IN ('Science','Arts');
SELECT DISTINCT CourseName FROM Courses;
SELECT * FROM Results WHERE Marks > 60 AND (SELECT Age FROM StudentData WHERE ID = Results.StudentID) < 20;
SELECT * FROM Results WHERE Marks > 50 OR (SELECT Age FROM StudentData WHERE ID = Results.StudentID) < 18;

-- #############################################
-- Q15 – Clauses
-- #############################################

SELECT * FROM Results ORDER BY Marks DESC LIMIT 5;
SELECT * FROM Teachers WHERE Email IS NULL;
SELECT * FROM StudentData WHERE Name LIKE '%John%';
SELECT Department, AVG(Marks) FROM Results r JOIN StudentData s ON r.StudentID = s.ID GROUP BY Department;

-- #############################################
-- Q16 – Clauses
-- #############################################

SELECT * FROM Results WHERE Marks > 50;
SELECT CourseName, Credits FROM Courses ORDER BY Credits DESC;
SELECT Department, COUNT(*) FROM StudentData GROUP BY Department;
SELECT DeptID, COUNT(*) FROM Teachers GROUP BY DeptID HAVING COUNT(*) > 10;

-- #############################################
-- Q17 – Aggregate Functions
-- #############################################

SELECT COUNT(*) FROM StudentData;
SELECT AVG(Marks) FROM Results;
SELECT SUM(Marks) FROM Results WHERE CourseID = 101;
SELECT MAX(Marks) FROM Results;

-- #############################################
-- Q18 – Aggregate Functions
-- #############################################

SELECT MIN(Marks) FROM Results;
SELECT COUNT(DISTINCT StudentID) FROM Results;
SELECT SUM(Credits) FROM Courses;
SELECT AVG(Credits) FROM Courses;

-- #############################################
-- Q19 – Aggregate Functions
-- #############################################

SELECT COUNT(*) FROM StudentData;
SELECT AVG(Marks) FROM Results;
SELECT SUM(Marks) FROM Results;
SELECT MAX(Marks) FROM Results;

-- #############################################
-- Q20 – Constraints
-- #############################################

CREATE TABLE Students2 (StudentID INT PRIMARY KEY, Name VARCHAR(100) NOT NULL, Email VARCHAR(100) UNIQUE);
ALTER TABLE Results ADD CONSTRAINT chk_marks CHECK (Marks >= 0);

-- #############################################
-- Q21 – Constraints
-- #############################################

CREATE TABLE Faculty (FacultyID INT, Name VARCHAR(100) NOT NULL, DeptID INT);
ALTER TABLE Results ALTER COLUMN Marks SET DEFAULT 0;
ALTER TABLE Results ADD FOREIGN KEY (CourseID) REFERENCES Courses(CourseID);
ALTER TABLE Teachers ADD CONSTRAINT chk_age CHECK (Age > 21);

-- #############################################
-- Q22 – Constraints
-- #############################################

CREATE TABLE Departments (DeptID INT PRIMARY KEY, DeptName VARCHAR(100));
ALTER TABLE Faculty ADD FOREIGN KEY (DeptID) REFERENCES Departments(DeptID);
ALTER TABLE Results ADD CONSTRAINT chk_marks_range CHECK (Marks BETWEEN 0 AND 100);
ALTER TABLE Faculty ALTER COLUMN DeptName SET DEFAULT 'General';

-- #############################################
-- Q23 – Joins
-- #############################################

SELECT s.Name, c.CourseName FROM StudentData s JOIN Courses c ON s.ID = c.CourseID;
SELECT s.Name, r.Marks FROM StudentData s INNER JOIN Results r ON s.ID = r.StudentID;
SELECT s.Name, r.Marks FROM StudentData s LEFT JOIN Results r ON s.ID = r.StudentID;
SELECT t.Name, d.DeptName FROM Teachers t JOIN Departments d ON t.DeptID = d.DeptID;

-- #############################################
-- Q24 – Joins
-- #############################################

SELECT s.Name, c.CourseName FROM StudentData s INNER JOIN Courses c ON s.ID = c.CourseID;
SELECT s.Name, r.Marks FROM StudentData s LEFT JOIN Results r ON s.ID = r.StudentID;
SELECT s.Name FROM StudentData s LEFT JOIN Courses c ON s.ID = c.CourseID WHERE c.CourseID IS NULL;
SELECT c.CourseName, s.Name FROM Courses c INNER JOIN StudentData s ON c.CourseID = s.ID;
